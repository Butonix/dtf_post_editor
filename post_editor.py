import glob
import json
from io import BytesIO

import pyqrcode
import requests
from PIL import Image

SESSION = requests.Session()
with open('.env', 'r') as env_file:
    SESSION.headers = json.load(env_file)

class Post:
    """
        –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ DTF

        __init__:

        :str: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º

        :int: ID –ø–æ–¥—Å–∞–π—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    """
    def __init__(self, title: str = '', subsite_id: int = 132168):
        self.user_id = 74342
        self.title = title
        self.blocks = []
        self.is_published = True
        self.subsite_id = subsite_id

    @staticmethod
    def upload_from_file(file_name: str):
        """
            –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞, –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
        """
        with open(file_name, 'rb') as i_f:
            responce = SESSION.post('https://api.dtf.ru/v1.8/uploader/upload', files={f'file_0': i_f}).json()
            return responce['result'][0]

    @staticmethod
    def upload_from_folder(folder_name: str):
        """
            –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏, –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
        """
        upl_imgs = list()
        my_list = list()
        n = 10
        for extension in ('*.jpeg', '*.jpg', '*.png'):
            my_list.extend(glob.iglob(f"{folder_name}/{extension}"))

        my_list_chunks = [my_list[i * n:(i + 1) * n] for i in range((len(my_list) + n - 1) // n)]

        for _, img_slice in enumerate(my_list_chunks):
            print(f'{_}/{len(my_list_chunks)}')
            images = SESSION.post('https://api.dtf.ru/v1.8/uploader/upload', files={f'file_{i}': open(x, 'rb') for i, x in enumerate(img_slice)}).json()
            upl_imgs.extend(images['result'])

        return zip(map(lambda x: x.split('.')[0].split('\\')[-1], my_list), upl_imgs)

    @staticmethod
    def generate_block(block_type: str, block_data: dict, block_cover: bool, block_anchor: str) -> dict:
        return {
            'type': block_type,
            'data': block_data,
            'cover': block_cover,
            'anchor': block_anchor
        }

    @staticmethod
    def generate_anchor_link(link_text: str, link_anchor: str) -> str:
        """
            –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —è–∫–æ—Ä—å(anchor)
        """
        return f'''<a href="#{link_anchor}">{link_text}</a>'''

    @staticmethod
    def generate_qr_codes(items: list, save_path: str = 'qr'):
        for _, image in items:
            print(image['data']['uuid'])
            img = Image.new('L', (image['data']['width'], image['data']['height']), 255)
            url = pyqrcode.create(image['data']['uuid'], version=5)
            buffer = BytesIO()
            url.png(buffer, scale=6)
            with Image.open(buffer) as buffer_qr_img:
                img.paste(buffer_qr_img, (0, 0))
            img.save(f"{save_path}/{image['data']['uuid']}.png")

    def add_text_block(self, text: str = '–ü—É—Å—Ç–æ–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞', cover: bool = False, anchor: str = ''):
        """
            :str: –¢–µ–∫—Å—Ç –±–ª–æ–∫–∞

            :bool: –í—ã–≤–æ–¥ –≤ –ª–µ–Ω—Ç—É

            :str: –Ø–∫–æ—Ä—å
        """
        self.blocks.append(
            self.generate_block('text', {'text': text}, cover, anchor)
        )

    def add_header_block(self, text: str = '–ó–∞–≥–æ–ª–æ–≤–æ–∫', size: int = 2, cover: bool = False, anchor: str = ''):
        """
            :str: –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞

            :int: –†–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ 2-3-4

            :bool: –í—ã–≤–æ–¥ –≤ –ª–µ–Ω—Ç—É

            :str: –Ø–∫–æ—Ä—å
        """
        style = f'h{max(min(size, 4), 2)}'
        self.blocks.append(
            self.generate_block('header', {'text': text, 'style': style}, cover, anchor)
        )

    def add_media_list(self, items: list):
        """
            –î–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏, –∞–≤—Ç–æ—Ü–µ–Ω—Ç—Ä–æ–≤–∫–∞ –µ—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ > —à–∏—Ä–∏–Ω—ã

            :list: –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        for file_name, item in items:
            n, m = sorted([item['data']['width'], item['data']['height']])
            if m % n > 100:
                back = not item['data']['width'] > item['data']['height']
            else:
                back = item['data']['width'] < 680 or item['data']['height'] > 1000
            self.add_media_block(item, background=back, anchor=file_name)

    def add_media_block(self, item: dict, title: str = '', author: str = '', background: bool = True, border: bool = False, cover: bool = False, anchor: str = ''):
        """
            :dict: C–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            :str: –ó–∞–º–µ—Ç–∫–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

            :str: –ê–≤—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            :bool: –û—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

            :bool: –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–º–∫—É

            :bool: –í—ã–≤–æ–¥ –≤ –ª–µ–Ω—Ç—É

            :str: –Ø–∫–æ—Ä—å
        """
        self.blocks.append(
            self.generate_block('media', {'items': [{"title": title, "author": author, "image": item}], 'with_background': background, 'with_border': border}, cover, anchor)
        )

    def publish_post(self):
        response = SESSION.post('https://api.dtf.ru/v1.8/entry/create', data={
            "user_id": self.user_id,
            "title": self.title,
            "entry": json.dumps({
                "blocks":
                    self.blocks
            }),
            "is_published": self.is_published,
            "subsite_id": self.subsite_id
        })
        print(response.text)


if __name__ == "__main__":
    test_post = Post(title='–ü—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç #42', subsite_id=132168) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ ID –ø–æ–¥—Å–∞–π—Ç–∞
    test_post.add_media_block(Post.upload_from_file('anime.png'), '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', '–ê–Ω–∏–º–µ', background=False, cover=True) # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –ª–µ–Ω—Ç—É
    test_post.add_text_block('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤ –º–æ–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ üî•', cover=True) # –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    test_post.add_header_block(Post.generate_anchor_link('–ó–∞–≥–æ–ª–æ–≤–æ–∫-—Å—Å—ã–ª–∫–∞', 'qrfast'), cover=False) # –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2 —Ä–∞–∑–º–µ—Ä–∞, —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —è–∫–æ—Ä—å
    #Post.generate_qr_codes(Post.upload_from_folder('source'), save_path='qr') # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º qr –∫–æ–¥—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ source –≤ –ø–∞–ø–∫—É qr
    test_post.add_media_list(Post.upload_from_folder('qr')) # –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ qr
    test_post.add_text_block('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ, –¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –≤ –º–æ–µ–º post_editor v0.1a') # –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    test_post.add_text_block('#qrfast', anchor='qrfast') # —Ö—ç—à—Ç–µ–≥ —Å —è–∫–æ—Ä–µ–º
    test_post.publish_post()
